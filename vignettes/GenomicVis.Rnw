%\VignetteIndexEntry{WGS Genomic Visualisation}
%\VignettePackage{GenomicVis}
%\VignetteEngine{knitr::knitr}

\documentclass[a4paper,11pt]{article}
\usepackage{a4wide}

<<style-knitr, eval=TRUE, echo=FALSE, results="asis">>=
BiocStyle::latex()
@

\title{GenomicVis}
\author{Jonathan J. Ellis and Lutz Krause}

\begin{document}
\maketitle
\tableofcontents

The \Rpackage{GenomicVis} package contains a collection of function for the
visualisation of genomic data typically derived from high-throughput whole
genome sequencing and SNP-Chip experiments.  Most of the functions provided
by this package are agnostic about where the data actually comes from, that
is, they required input in simple \Rclass{data.frame} instances that are not
tied to a particular file format; however, we also provide many examples of
creating these simply \Rclass{data.frame}s from standard file formats such
as VCFs and from common software tools such as \software{GAP} and
\software{Breakdancer}.

% Kataegis is a pattern of localised hypermutation that has been identified in
% cancer genomes. Regions of kataegis have been shown to be co-localised with
% regions of somatic genome rearrangements.  The base mutations in these regions
% were found to be almost exclusively cytosine to thymine in the context of a TpC
% dinucleotide (Nik-Sainal S. et al (2012) Mutational processes molding the
% genomes of 21 breast cancers. Cell 149:(5) 979--93).

% Macro/micro clustering.

% Substitutions within the region where characterised by a distinctive mutational
% spectrum and sequence context.  Most were C>T tranitions at TpCtX
% trinucleotides.

<<>>=
library(GenomicVis)
@

\section{Kataegis}

The package detects and visualises kataegis from single nucleotide
variations (SNVs).  The package currently implements two different
algorithms to detect kataegis and visualises SNVs as rainfall plots.  To
create a rainfall plot, you do not necessarily need to identify regions of
kataegis first.  To create a rainfall plot, you need to have your SNVs in a
\Rclass{GRanges} instance containing only SNVs (i.e., no INDELs) with single
ALT alleles.  The \Rclass{GRanges} instance must also contain a valid
\Rclass{Seqinfo} instance that provides the lengths of the chromosomes.  The
easiest way to obtain the appropriate instance from a VCF file is to use the
\Rfunction{read.vcf} function in the \Rpackage{GenomicVis} package.  This
function returns a 

\begin{center}
<<>>=
# We need to import VariantAnnotation to get access to rowData
suppressMessages(library(VariantAnnotation))
vcf.file <- system.file('extdata', 'example.vcf', package = 'GenomicVis')
vcf <- read.vcf(vcf.file, 'GRCh37')
x <- rowData(vcf)
plotKataegis(x)
@
\end{center}


To create a kataegis plot of each VCF in the current directory, you could
use the following code:

<<eval=FALSE>>=
vcf.files <- list.vcffiles() 
for (vcf.file in vcf.files) {
  vcf <- read.vcf(vcf.file, 'GRCh37')
  x <- rowData(vcf)
  kat <- kataegis(x)
  name <- tools::file_path_sans_ext(vcf.file)
  png(file = paste0(name, '.png'))
  plotKataegis(x, main = name) 
  dev.off()
}
@

\subsection{Kataegis Detection}

To detect regions of kataegis, use the \Rfunction{kataegis} function.  This
take the same \Rclass{GRanges} instance as \Rfunction{plotKataegis}, and
returns another \Rclass{GRanges} instance containing the kataegis regions.
There are two different algorithms for the detection of kataegis: one that
uses piecewise constant curve fitting and one that uses a brute force
approach.

\subsubsection{Piecewise Constant Curve Fitting Detection}

<<eval=FALSE>>=
kat <- kataegis(x, pcf = TRUE, ncpus = 4)
@

\subsubsection{Brute Force Detection}

<<eval=FALSE>>=
kat <- kataegis(x, ncpus = 4)
@


\section{SNV Clustering}

\begin{center}
<<>>=
file.names <- sprintf('LC%s_TUMOUR_%s.vcf', rep(1:3, each = 2), 
  rep(c('A', 'B'), each = 3))
vcf.files <- system.file('extdata', file.names, package = 'GenomicVis')  
sample.names <- tools::file_path_sans_ext(basename(vcf.files))
snv.clustering(vcf.files, sample.names, genome = 'hg19')
@
\end{center}

\section{SNV Heatmaps}

\begin{center}
<<>>=
file.names <- c('LC1_A.snpeff.vcf', 'LC1_B.snpeff.vcf', 
  'LC1_C.snpeff.vcf', 'LC1_D.snpeff.vcf')
vcf.files <- system.file('extdata', file.names, package = 'GenomicVis')
sample.names <- c('LC1_A', 'LC1_B', 'LC1_C', 'LC1_D')
dat <- read.snpeff.vcfs(vcf.files, 'GRCh37', sample.names)
snv.heatmap(dat, margins = c(5, 9), y.cex.axis = 0.7)
@
\end{center}


\section{SNV Venn Diagrams}

\begin{center}
<<eval=FALSE>>=
library(Vennerable)
file.names <- c('LC1_TUMOUR_A.vcf', 'LC1_TUMOUR_B.vcf')
vcf.files <- system.file('extdata', file.names, package = 'GenomicVis')
sample.names <- c('LC1_A', 'LC1_B')
v <- vcf.venn(vcf.files, 'GRCh37', sample.names)
plot(v$venn)
@
\end{center}

\begin{center}
  \includegraphics[width=0.8\textwidth]{venn}
\end{center}


\section{CNV Plots}

\texttt{LC1\_TUMOUR\_A\_FinalReport.txt} is the final report file produced
by \software{GenomeStudio} from the SNP-Chips.

\software{Breakdancer} was run on the germline and tumour sample at the same
time, i.e., the file contains calls from both samples.  The file names that
were input to \software{Breakdancer} contain the strings \texttt{BLOOD} and
\texttt{TUMOUR} to indicate the normal and tumour samples respectively.

<<eval=TRUE, fig.keep='last'>>=
data(SNPExample)
data(CNVExample)
data(SVExample)
cnv.plot('18', SNPExample, CNVExample, SVExample)
@

% \begin{center}
  % \includegraphics[width=0.8\textwidth]{cnvPlot}
% \end{center}

\section{CNV Heatmaps}

The \Robject{genes.gr} argument can easily be built from available
Bioconductor packages.  The following code shows how you could build the
appropriate \Rclass{GRanges} instance for human hg19 data.

<<eval=FALSE>>=
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(org.Hs.eg.db)
genes.gr <- genes(TxDb.Hsapiens.UCSC.hg19.knownGene)
gene_ids <- unlist(genes.gr$gene_id)
symbol.map <- select(org.Hs.eg.db, gene_ids, 'SYMBOL')
genes.gr$symbol <- symbol.map$SYMBOL
@

The data set \Robject{hg19.Genes.GRanges} contains human genes with the
appropriate gene symbols.

\begin{center}
<<>>=
data(hg19Genes)
data(CNVData)
set.seed(100)
g <- sample(hg19Genes$symbol, 20)
cnv.heatmap(CNVData, symbols = g, genes.gr = hg19Genes)
@
\end{center}

To just use a subset of samples.

\begin{center}
<<eval=FALSE>>=
cnv.heatmap(CNVData, samples = c('LC3_A', 'LC3_B'), genes.gr = hg19Genes)
@
\end{center}

\section{Example Datasets}

The previous sections of this vignette have relied on prepared datasets
distributed with the package.  While these provide examples of the inputs
required by the various plotting functions of this package, they do not
provide guidance on how to create them from the various files produced by
HTS software.

This section explains how each of the example data sets were created.
Typically, they were created from standard file formats such as VCF or the
output from particular software such as \software{GAP} or
\software{Breakdancer}.

\Robject{hg19Genes} contains the ranges (start, end) positions of human
RefSeq genes and corresponding gene symbols.  The BED file used was
downloaded from the UCSC Genome Browser web site.

<<eval=FALSE>>=
library(org.Hs.eg.db)
library(GenomicRanges)
library(plyr)

x <- read.delim(
  'hg19_refGene.bed.gz',
  header = FALSE, 
  stringsAsFactors = FALSE
)
x <- x[x$V1 %in% paste0("chr", c(1:22, 'X', 'Y')), ]
keys <- x$V4
dict <- select(org.Hs.eg.db, keys, 'SYMBOL', keytype = 'REFSEQ')
symbol.df <- ddply(dict, .(REFSEQ), summarise, 
  symbol = paste(unique(SYMBOL), collapse = ';'))
rownames(symbol.df) <- symbol.df$REFSEQ
x$symbol <- symbol.df[x$V4, ]$symbol
hg19Genes <- GRanges(
  seqnames = Rle(x$V1),
  ranges = IRanges(start = x$V2, end = x$V3),
  strand = Rle(x$V6),
  refseq = x$V4, 
  symbol = x$symbol
)
@

\texttt{CNVExample} was built from the output of GAP, specifically two files
named \texttt{CN\_BA\_Illumina\_MySeries.txt} and
\texttt{Illum660K\_annot\_cut.csv}; although the exact names of these files
will depend on the exact settings you use when running GAP.

<<eval=FALSE>>=
CNVExample <- read.gap(
  system.file('extdata', 'CN_BA_Illumina_MySeries.chr18.txt', 
    package = 'GenomicVis'), 
  system.file('extdata', 'Illum660K_annot_cut.chr18.csv', 
    package = 'GenomicVis'),
  'LC3_TUMOUR_C_FinalReport'
)
@

\texttt{LC1\_TUMOUR\_A\_FinalReport.txt} is the final report file produced
by GenomeStudio from the SNP-Chips.

<<eval=FALSE>>=
filename <- system.file('extdata', 'LC3_TUMOUR_C_FinalReport.chr18.txt', 
  package = 'GenomicVis')
SNPExample <- read.illumina(filename)
@

\texttt{SVData} contains structural variant data obtained from Breakdancer.
Breakdancer was run on the germline and tumour sample at the same time, that
is, the file contains calls from both samples.  The file names that were
input to Breakdancer contain the strings \texttt{BLOOD} and \texttt{TUMOUR}
to indicate the normal and tumour samples respectively.

<<eval=FALSE>>=
SVExample <- read.breakdancer(
  system.file('extdata', 'LC3_BLOOD_TUMOUR_C.chr18.txt', 
    package = 'GenomicVis'), 
  normal.regex = 'BLOOD'
)
SVExample <- filter.breakdancer(SVExample)
@


\texttt{CNVData} was also prepared from the output of GAP.

<<eval=FALSE>>=
gap <- read.gap()
CNVData <- gap2cnv(gap)
CNVData <- CNVData[, c('Chr', 'Begin', 'End', 'LC3_TUMOUR_A_FinalReport',
  'LC3_TUMOUR_B_FinalReport', 'LC3_TUMOUR_C_FinalReport')]
colnames(CNVData) <- sub('_TUMOUR', '', colnames(CNVData))
colnames(CNVData) <- sub('_FinalReport', '', colnames(CNVData))
@

\section{Session Information}

<<echo=FALSE>>=
sessionInfo()
@


\end{document}
